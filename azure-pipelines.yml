# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  batch: true
  branches:
    include:
    - rc
    - dev
    - main

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isDev: $[eq(variables['Build.SourceBranch'], 'refs/heads/dev')]

pr:
  - rc
  - dev
  - main

resources:
  containers:
  - container: py37
    image: python:3.7
  - container: py38
    image: python:3.8
  - container: py39
    image: python:3.9

stages:
- stage: 'Test'
  jobs:
  - job: 'Test'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      maxParallel: 3
      matrix:
        Python37:
          containerResource: py37
        Python38:
          containerResource: py38
        Python39:
          containerResource: py39

    container: $[ variables['containerResource']]

    steps:
    - script: |
        python -m venv venv
        . venv/bin/activate
        pip install -r requirements.txt
        pip install -r requirements_test.txt
      displayName: 'Install dependencies'
    - script: |
        . venv/bin/activate
        pip install -e .
      displayName: 'Install'
    - script: |
        . venv/bin/activate
        pip install pytest pytest-azurepipelines pytest-cov pytest-xdist
        pytest --cov compal --cov-report html -qq -o console_output_style=count -p no:sugar tests
      displayName: 'pytest'
    # Dirty but low-effort way to run the same steps that tox does:
    # This could be a lint and a test stage
    - script: |
        . venv/bin/activate
        flake8 rpkiclientweb setup.py
        black --check --diff rpkiclientweb setup.py
        python setup.py sdist
        twine check dist/*
        check-manifest
- stage: 'Dist'
  dependsOn: 'Test'
  jobs:
  - job: 'BuildDist'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Python38:
          containerResource: py38
        Python39:
          containerResource: py39
    container: $[ variables['containerResource']]

    steps:
    - script: |
        python -m venv venv
        . venv/bin/activate
        pip install -r requirements.txt
        pip install -r requirements_test.txt
      displayName: 'Install dependencies'
    - script: |
        . venv/bin/activate
        twine check dist/*
        check-manifest
    - script: |
        . venv/bin/activate
        python setup.py sdist
      displayName: 'Build dist'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'dist'

- stage: 'Package'
  dependsOn: 'Dist'
  jobs:
  - job: 'DockerBuild'
    steps:
    # Build image tagged with correct tag
    - task: Docker@2
      condition: and(succeeded(), eq(variables.isDev, true))
      inputs:
        containerRegistry: 'dockerhub-tiesdekock'
        repository: 'tiesdekock/rpki-client-web'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: 'development'
    - task: Docker@2
      condition: and(succeeded(), eq(variables.isMain, true))
      inputs:
        containerRegistry: 'dockerhub-tiesdekock'
        repository: 'tiesdekock/rpki-client-web'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: 'latest'
